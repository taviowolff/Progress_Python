# Controlando a quantidade de argumentos posicionais e nomeados em fun√ß√µes 
# *args (ilimitado de argumentos posicionais)
# **kwargs (ilimitado de argumentos nomeados) 

# üü¢ Positional-only Parameters (/) - Tudo antes da barra deve ser ‚ùóAPENAS‚ùó posicinal
# PEP 570 - Python Positional Only Parameters
# https://peps.python.org/pep-0570/

def soma (a, b, /, x, y):
    print(a + b + x + y)
soma(1, 2, 3, y=4)

# Aqui teremos uma fun√ß√£o que ao passar (/)
# ela aceita os par√¢metros nomeados e 
# n√£o nomeados(posicionais) ap√≥s a (/)
# Mas apenas posicinais antes da (/)


# 1 e 2 posicinais / 3, posicional e 4 nomeado
# üü¢ Keyword-Only Arguments (*) - * sozinho ‚ùóN√ÉO SUGA‚ùó valores.
# PEP 3102 - Keyword-Only Arguments
# https://peps.python.org/pep-3102/

# Keyword-only arguments s√£o par√¢metros que s√≥ podem ser passados por \
# nome, n√£o por posi√ß√£o. Eles foram introduzidos na PEP 3102 e foram 
# inclu√≠dos no Python 3.0.

# Sintaxe:
# python

def function(*, a, b):
    pass

# Tudo ap√≥s o asterisco * deve ser apenas por palavra-chave (keyword).
# No exemplo acima, a e b devem ser passados como argumentos nomeados.

def saudacao(*, name="User"):
    print(f"Hello, {name}!")

saudacao(name="Alice")  # Correto
# saudacao("Alice")  # Erro, `name` deve ser passado como argumento nomeado



# UNINDO Positional-only e Keyword-only

# Voc√™ pode combinar ambos para criar fun√ß√µes que tenham par√¢metros posicionais, 
# par√¢metros que podem ser tanto posicionais quanto nomeados, e par√¢metros que 
# s√£o apenas por palavra-chave.

# Exemplo:

def func (a, b, /, c, *, d):
    pass

# Uso correto:
func(1, 2, c=3, d=4)

# argumento a -> s√≥ pode ser posicional
# argumento b -> s√≥ pode ser posicional
# argumento c -> pode ser tanto posicional quanto nomeado
# argumento d -> s√≥ pode ser nomeado

# Uso incorreto:
# func(a=1, b=2, c=3, d=4)  # Erro, `a` e `b` s√£o somente posicionais

# Esses recursos ajudam a criar APIs mais claras e flex√≠veis, controlando 
# como os argumentos s√£o passados para as fun√ß√µes e mantendo compatibilidade e legibilidade.



